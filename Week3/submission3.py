import pandas
import numpy as np
from sklearn.metrics import roc_auc_score
import math


'''
В этом задании мы предлагаем вам самостоятельно реализовать градиентный спуск.

В качестве метрики качества будем использовать AUC-ROC (Area Under ROC-Curve). 
Она предназначена для алгоритмов бинарной классификации, выдающих оценку принадлежности объекта к одному из классов. 
По сути, значение этой метрики является агрегацией показателей качества всех алгоритмов, которые можно получить, 
выбирая какой-либо порог для оценки принадлежности.

В Scikit-Learn метрика AUC реализована функцией sklearn.metrics.roc_auc_score. 
В качестве первого аргумента ей передается вектор истинных ответов, 
в качестве второго — вектор с оценками принадлежности объектов к первому классу.

Загрузите данные из файла data-logistic.csv. 
Это двумерная выборка, целевая переменная на которой принимает значения -1 или 1.
'''
train = pandas.read_csv('data-logistic.csv', header=None)
y = train[train.columns[0]].as_matrix(columns=None)
x = train[train.columns[1:]].as_matrix(columns=None)

'''
Убедитесь, что выше выписаны правильные формулы для градиентного спуска. 
Обратите внимание, что мы используем полноценный градиентный спуск, а не его стохастический вариант!
'''

'''
Реализуйте градиентный спуск для обычной и L2-регуляризованной (с коэффициентом регуляризации 10) логистической регрессии. 
Используйте длину шага k=0.1. В качестве начального приближения используйте вектор (0, 0).
'''
def sigmoid(x):
    return 1.0 / 1 + math.exp(-x)

def distamce(a, b):
    return np.sqrt(np.sqrt(a[0] - b[0])**2 + np.sqrt(a[1] - b[1])**2)

def log_regression(x, y, k, w, C, epsilon, max_iter):
    w1, w2 = w
    for i in range(max_iter):
        w1new = w1 + k * np.mean(y * x[:, 0] * (1 - (1. / (1 + np.exp(-y * (w1 * x[:, 0] + w2 * x[:, 1])))))) - k * C * w1
        w2new = w2 + k * np.mean(y * x[:, 1] * (1 - (1. / (1 + np.exp(-y * (w1 * x[:, 0] + w2 * x[:, 1])))))) - k * C * w2

        if distamce((w1new, w2new), (w1, w2)) < epsilon:
            break
        w1, w2 = w1new, w2new

    prediction = []

    for i in range(len(x)):
        t1 = -w1 * x[i, 0] - w2 * x[i, 1]
        s = sigmoid(t1)
        prediction.append(s)
    return prediction


'''
Запустите градиентный спуск и доведите до сходимости 
(евклидово расстояние между векторами весов на соседних итерациях должно быть не больше 1e-5). 
Рекомендуется ограничить сверху число итераций десятью тысячами.
'''

'''
Какое значение принимает AUC-ROC на обучении без регуляризации и при ее использовании? 
Эти величины будут ответом на задание. 
В качестве ответа приведите два числа через пробел. 
Обратите внимание, что на вход функции roc_auc_score нужно подавать оценки вероятностей, подсчитанные обученным алгоритмом. 
Для этого воспользуйтесь сигмоидной функцией: a(x) = 1 / (1 + exp(-w1 x1 - w2 x2)). 
'''

p0 = log_regression(x, y, 0.1, [0.0, 0.0], 0, 10**(-5), 10000)
p1 = log_regression(x, y, 0.1, [0.0, 0.0], 10, 10**(-5), 10000)

print(round(roc_auc_score(y, p0), 3))
print(round(roc_auc_score(y, p1), 3))

res = []
res.append(round(roc_auc_score(y, p0), 3))
res.append(round(roc_auc_score(y, p1), 3))

file = open('s3.txt', 'w')
file.write(' '.join(map(str, res)))
file.close()

'''
Попробуйте поменять длину шага. 
Будет ли сходиться алгоритм, если делать более длинные шаги? 
Как меняется число итераций при уменьшении длины шага?
'''

'''
Попробуйте менять начальное приближение. Влияет ли оно на что-нибудь?
'''


print('fin')